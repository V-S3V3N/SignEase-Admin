{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\nimport { db } from \"../firebase\";\nexport const useUserStats = () => {\n  _s();\n  const [nonAdminUsers, setNonAdminUsers] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchUserStats = async () => {\n      try {\n        const usersRef = collection(db, \"users\");\n        // Get all users documents then count those that are not admin\n        const allUsersSnapshot = await getDocs(usersRef);\n        const allUsers = allUsersSnapshot.docs.map(doc => doc.data());\n        const nonAdmins = allUsers.filter(user => user.role !== \"admin\");\n        setNonAdminUsers(nonAdmins.length);\n      } catch (error) {\n        console.error(\"Error fetching user stats:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserStats();\n  }, []);\n  return {\n    nonAdminUsers,\n    loading\n  };\n};\n_s(useUserStats, \"4+azKwXvjhQAlVmwLxJTHQd5ZtM=\");","map":{"version":3,"names":["useEffect","useState","collection","getDocs","query","where","db","useUserStats","_s","nonAdminUsers","setNonAdminUsers","loading","setLoading","fetchUserStats","usersRef","allUsersSnapshot","allUsers","docs","map","doc","data","nonAdmins","filter","user","role","length","error","console"],"sources":["C:/FYP/Application/SignEase/signease-admin/client/src/hooks/useUserStats.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport { db } from \"../firebase\";\r\n\r\nexport const useUserStats = () => {\r\n  const [nonAdminUsers, setNonAdminUsers] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchUserStats = async () => {\r\n      try {\r\n        const usersRef = collection(db, \"users\");\r\n        // Get all users documents then count those that are not admin\r\n        const allUsersSnapshot = await getDocs(usersRef);\r\n        const allUsers = allUsersSnapshot.docs.map((doc) => doc.data());\r\n        const nonAdmins = allUsers.filter((user) => user.role !== \"admin\");\r\n        setNonAdminUsers(nonAdmins.length);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user stats:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserStats();\r\n  }, []);\r\n\r\n  return { nonAdminUsers, loading };\r\n};\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AACtE,SAASC,EAAE,QAAQ,aAAa;AAEhC,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAGZ,UAAU,CAACI,EAAE,EAAE,OAAO,CAAC;QACxC;QACA,MAAMS,gBAAgB,GAAG,MAAMZ,OAAO,CAACW,QAAQ,CAAC;QAChD,MAAME,QAAQ,GAAGD,gBAAgB,CAACE,IAAI,CAACC,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;QAC/D,MAAMC,SAAS,GAAGL,QAAQ,CAACM,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,OAAO,CAAC;QAClEd,gBAAgB,CAACW,SAAS,CAACI,MAAM,CAAC;MACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,SAAS;QACRd,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEJ,aAAa;IAAEE;EAAQ,CAAC;AACnC,CAAC;AAACH,EAAA,CAxBWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}