{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { collection, getDocs, query, where, Timestamp } from \"firebase/firestore\";\nimport { db } from \"../firebase\";\nexport const useRevenue = () => {\n  _s();\n  const [monthlyRevenue, setMonthlyRevenue] = useState(0);\n  const [yearlyRevenue, setYearlyRevenue] = useState(0);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchRevenue = async () => {\n      try {\n        const now = new Date();\n        const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n        const startOfYear = new Date(now.getFullYear(), 0, 1);\n        const startOfMonthTS = Timestamp.fromDate(startOfMonth);\n        const startOfYearTS = Timestamp.fromDate(startOfYear);\n        const revenueRef = collection(db, \"planrevenues\");\n        const monthlyQuery = query(revenueRef, where(\"timestamp\", \">=\", startOfMonthTS));\n        const yearlyQuery = query(revenueRef, where(\"timestamp\", \">=\", startOfYearTS));\n        const [monthlySnap, yearlySnap] = await Promise.all([getDocs(monthlyQuery), getDocs(yearlyQuery)]);\n        const monthlyTotal = monthlySnap.docs.reduce((sum, doc) => {\n          const data = doc.data();\n          return sum + (data.amount || 0);\n        }, 0);\n        const yearlyTotal = yearlySnap.docs.reduce((sum, doc) => {\n          const data = doc.data();\n          return sum + (data.amount || 0);\n        }, 0);\n        setMonthlyRevenue(monthlyTotal);\n        setYearlyRevenue(yearlyTotal);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching revenue:\", error);\n        setLoading(false);\n      }\n    };\n    fetchRevenue();\n  }, []);\n  return {\n    monthlyRevenue,\n    yearlyRevenue,\n    loading\n  };\n};\n_s(useRevenue, \"+yeBb/HXzI4C7yaCGMGZFJVdpHg=\");","map":{"version":3,"names":["useEffect","useState","collection","getDocs","query","where","Timestamp","db","useRevenue","_s","monthlyRevenue","setMonthlyRevenue","yearlyRevenue","setYearlyRevenue","loading","setLoading","fetchRevenue","now","Date","startOfMonth","getFullYear","getMonth","startOfYear","startOfMonthTS","fromDate","startOfYearTS","revenueRef","monthlyQuery","yearlyQuery","monthlySnap","yearlySnap","Promise","all","monthlyTotal","docs","reduce","sum","doc","data","amount","yearlyTotal","error","console"],"sources":["C:/FYP/Application/SignEase/signease-admin/client/src/hooks/useRevenue.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { collection, getDocs, query, where, Timestamp } from \"firebase/firestore\";\r\nimport { db } from \"../firebase\";\r\n\r\nexport const useRevenue = () => {\r\n  const [monthlyRevenue, setMonthlyRevenue] = useState(0);\r\n  const [yearlyRevenue, setYearlyRevenue] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchRevenue = async () => {\r\n      try {\r\n        const now = new Date();\r\n\r\n        const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\r\n        const startOfYear = new Date(now.getFullYear(), 0, 1);\r\n\r\n        const startOfMonthTS = Timestamp.fromDate(startOfMonth);\r\n        const startOfYearTS = Timestamp.fromDate(startOfYear);\r\n\r\n        const revenueRef = collection(db, \"planrevenues\");\r\n\r\n        const monthlyQuery = query(revenueRef, where(\"timestamp\", \">=\", startOfMonthTS));\r\n        const yearlyQuery = query(revenueRef, where(\"timestamp\", \">=\", startOfYearTS));\r\n\r\n        const [monthlySnap, yearlySnap] = await Promise.all([\r\n          getDocs(monthlyQuery),\r\n          getDocs(yearlyQuery),\r\n        ]);\r\n\r\n        const monthlyTotal = monthlySnap.docs.reduce((sum, doc) => {\r\n          const data = doc.data();\r\n          return sum + (data.amount || 0);\r\n        }, 0);\r\n\r\n        const yearlyTotal = yearlySnap.docs.reduce((sum, doc) => {\r\n          const data = doc.data();\r\n          return sum + (data.amount || 0);\r\n        }, 0);\r\n\r\n        setMonthlyRevenue(monthlyTotal);\r\n        setYearlyRevenue(yearlyTotal);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching revenue:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchRevenue();\r\n  }, []);\r\n\r\n  return { monthlyRevenue, yearlyRevenue, loading };\r\n};\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,SAAS,QAAQ,oBAAoB;AACjF,SAASC,EAAE,QAAQ,aAAa;AAEhC,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMgB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;QAEtB,MAAMC,YAAY,GAAG,IAAID,IAAI,CAACD,GAAG,CAACG,WAAW,CAAC,CAAC,EAAEH,GAAG,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;QACnE,MAAMC,WAAW,GAAG,IAAIJ,IAAI,CAACD,GAAG,CAACG,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAErD,MAAMG,cAAc,GAAGjB,SAAS,CAACkB,QAAQ,CAACL,YAAY,CAAC;QACvD,MAAMM,aAAa,GAAGnB,SAAS,CAACkB,QAAQ,CAACF,WAAW,CAAC;QAErD,MAAMI,UAAU,GAAGxB,UAAU,CAACK,EAAE,EAAE,cAAc,CAAC;QAEjD,MAAMoB,YAAY,GAAGvB,KAAK,CAACsB,UAAU,EAAErB,KAAK,CAAC,WAAW,EAAE,IAAI,EAAEkB,cAAc,CAAC,CAAC;QAChF,MAAMK,WAAW,GAAGxB,KAAK,CAACsB,UAAU,EAAErB,KAAK,CAAC,WAAW,EAAE,IAAI,EAAEoB,aAAa,CAAC,CAAC;QAE9E,MAAM,CAACI,WAAW,EAAEC,UAAU,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAClD7B,OAAO,CAACwB,YAAY,CAAC,EACrBxB,OAAO,CAACyB,WAAW,CAAC,CACrB,CAAC;QAEF,MAAMK,YAAY,GAAGJ,WAAW,CAACK,IAAI,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;UACzD,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,CAAC,CAAC;UACvB,OAAOF,GAAG,IAAIE,IAAI,CAACC,MAAM,IAAI,CAAC,CAAC;QACjC,CAAC,EAAE,CAAC,CAAC;QAEL,MAAMC,WAAW,GAAGV,UAAU,CAACI,IAAI,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;UACvD,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,CAAC,CAAC;UACvB,OAAOF,GAAG,IAAIE,IAAI,CAACC,MAAM,IAAI,CAAC,CAAC;QACjC,CAAC,EAAE,CAAC,CAAC;QAEL5B,iBAAiB,CAACsB,YAAY,CAAC;QAC/BpB,gBAAgB,CAAC2B,WAAW,CAAC;QAC7BzB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAO0B,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C1B,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEN,cAAc;IAAEE,aAAa;IAAEE;EAAQ,CAAC;AACnD,CAAC;AAACL,EAAA,CAjDWD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}